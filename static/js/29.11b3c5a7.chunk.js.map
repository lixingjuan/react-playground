{"version":3,"sources":["pages/TestReducerAndContext/hook.js","pages/TestReducerAndContext/Son.js","pages/TestReducerAndContext/index.js"],"names":["reducer","state","action","type","likeColors","payload","Error","initContextValue","IndexContext","createContext","Son","useContext","dispatch","onClick","String","Math","ceil","random","padEnd","Item","color","map","it","SmileTwoTone","twoToneColor","style","fontSize","IndexPage","useReducer","Provider","value"],"mappings":"2LAEO,SAASA,EAAQC,EAAOC,GAC7B,GACO,cADCA,EAAOC,KAEX,MAAO,CAAEC,WAAW,GAAD,mBAAMH,EAAMG,YAAZ,CAAwBF,EAAOG,WAElD,MAAM,IAAIC,MAIT,IAAMC,EAAmB,CAC9BH,WAAY,CAAC,SAGFI,EAAeC,wBAAcF,G,iBC+B3BG,MAnCf,WACE,MAA4BC,qBAAWH,GAA/BP,EAAR,EAAQA,MAAOW,EAAf,EAAeA,SACPR,EAAeH,EAAfG,WASR,OACE,gCACE,cAAC,IAAD,CAAQS,QATY,WACtBD,EAAS,CACPT,KAAM,YACNE,QAVsB,WACtBS,OAAOC,KAAKC,KAAKD,KAAKE,SAALF,KAAA,IAAgB,GAAM,KAAIG,OAAO,EAAG,OAerD,oHAIA,eAAC,IAAD,WACE,cAAC,IAAKC,KAAN,UACE,cAAC,IAAD,CAAKC,MAAM,OAAX,uCADa,wCAIdhB,EAAWiB,KAAI,SAACC,GAAD,OACd,cAAC,IAAKH,KAAN,UACE,gCACE,cAAC,IAAD,CAAKC,MAAOE,EAAZ,SAAiBA,IACjB,cAACC,EAAA,EAAD,CAAcC,aAAcF,EAAIG,MAAO,CAAEC,SAAU,cAHvCJ,aCjBXK,UAXf,WAEE,MAA0BC,qBAAW5B,EAASO,GAA9C,mBAAON,EAAP,KAAcW,EAAd,KAEA,OACE,cAACJ,EAAaqB,SAAd,CAAuBC,MAAO,CAAE7B,QAAOW,YAAvC,SACE,cAAC,EAAD","file":"static/js/29.11b3c5a7.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport function reducer(state, action) {\n  switch (action.type) {\n    case \"addColors\":\n      return { likeColors: [...state.likeColors, action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nexport const initContextValue = {\n  likeColors: [\"pink\"],\n};\n\nexport const IndexContext = createContext(initContextValue);\n","import React, { useContext } from \"react\";\nimport { Button, Tag, List } from \"antd\";\nimport { IndexContext } from \"./hook\";\nimport { SmileTwoTone } from \"@ant-design/icons\";\n\n/**\n * @desc 生成一个随机颜色\n */\nconst generateRandomColor = () =>\n  `#${String(Math.ceil(Math.random() * 10 ** 6)).padEnd(6, 0)}`;\n\nfunction Son() {\n  const { state, dispatch } = useContext(IndexContext);\n  const { likeColors } = state;\n\n  const handleAddColors = () => {\n    dispatch({\n      type: \"addColors\",\n      payload: generateRandomColor(),\n    });\n  };\n\n  return (\n    <div>\n      <Button onClick={handleAddColors}>\n        在子组件向颜色数组添加一个随机颜色\n      </Button>\n\n      <List>\n        <List.Item key=\"新的颜色列表\">\n          <Tag color=\"cyan\">颜色列表</Tag>\n        </List.Item>\n\n        {likeColors.map((it) => (\n          <List.Item key={it}>\n            <div>\n              <Tag color={it}>{it}</Tag>\n              <SmileTwoTone twoToneColor={it} style={{ fontSize: \"30px\" }} />\n            </div>\n          </List.Item>\n        ))}\n      </List>\n    </div>\n  );\n}\n\nexport default Son;\n","import React, { useReducer } from \"react\";\n\nimport SonComp from \"./Son\";\n\nimport { IndexContext, initContextValue, reducer } from \"./hook\";\n\nfunction IndexPage() {\n  /* 2. 将context的值作为reducer的初始值，如果不使用reducer, 则直接将该值赋给 IndexContext 的 value 即可  */\n  const [state, dispatch] = useReducer(reducer, initContextValue);\n\n  return (\n    <IndexContext.Provider value={{ state, dispatch }}>\n      <SonComp />\n    </IndexContext.Provider>\n  );\n}\n\nexport default IndexPage;\n"],"sourceRoot":""}